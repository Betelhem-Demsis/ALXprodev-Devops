#!/bin/bash

POKEMONS=("bulbasaur", "ivysaur", "venusaur", "charmander", "charmeleon")
API_BASE_URL="https://pokeapi.co/api/v2/pokemon"
OUTPUT_DIR="pokemon_data_parallel"
ERROR_LOG="errors_parallel.log"

MAX_PARALLEL_JOBS=3
mkdir -p "$OUTPUT_DIR"
> "$ERROR_LOG"
PIDS=()


fetch_pokemon_data() {
  local pokemon_name=$1
  local output_file="$OUTPUT_DIR/${pokemon_name,,}.json"

  echo "Fetching data for $pokemon_name..."
  response=$(curl -s -w "%{http_code}" "$API_BASE_URL/${pokemon_name,,}" -o "$output_file.tmp")
  status_code=${response: -3}
  if [[ $status_code -eq 200 ]]; then
    mv "$output_file.tmp" "$output_file"
    echo "Data for $pokemon_name saved to $output_file."
  else
    echo "Failed to fetch data for $pokemon_name. HTTP Status: $status_code" | tee -a "$ERROR_LOG"
    rm -f "$output_file.tmp"
  fi
}

run_parallel_tasks() {
  local task_list=("$@")
  local active_jobs=0
  trap 'kill "${PIDS[@]}" 2>/dev/null; exit 1' SIGINT SIGTERM

  for pokemon in "${task_list[@]}"; do
    fetch_pokemon_data "$pokemon" &
    PIDS+=("$!")  
    ((active_jobs++))

    if [[ $active_jobs -ge $MAX_PARALLEL_JOBS ]]; then
      wait -n 
      ((active_jobs--))
    fi
  done

  wait
  PIDS=()  
}

echo "Starting parallel data retrieval..."
run_parallel_tasks "${POKEMONS[@]}"

echo "Parallel processing complete. Data saved in the '$OUTPUT_DIR' directory. Errors logged in '$ERROR_LOG'."
